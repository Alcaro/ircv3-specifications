# Metadata Specification

Copyright (c) 2012 Kiyoshi Aman <kiyoshi.aman@gmail.com>
(CC BY-SA 3.0 Unported).

## Introduction

It is generally useful to associate metadata with one's IRC presence, e.g. to
make one's homepage or non-IRC contact details more discoverable. There are
several mechanisms for doing this, but they typically rely on the presence of
services and aren't really suitable for transient metadata such as a user's
current location.

This proposal aims to codify two coexisting mechanisms for working with
metadata: first, persisting metadata may be configured through services via
NickServ or an appropriate user authentication agent; second, transient
metadata may be configured through a client --> server event created
specifically for this purpose. Both mechanisms will behave identically, save
that services-driven metadata will be encapsulated via PRIVMSG.

## METADATA

All metadata subcommands will flow through the METADATA event. Metadata may
apply to channels, as well; in that case, an optional argument is provided
prior to the subcommand, as outlined in the format for each, if supported.

The METADATA event shall not be acknowledged by either party unless the
'metadata' CAP has been negotiated.

### METADATA LIST-SET

This subcommand shall list all currently-set metadata keys along with their
values. An optional string may be given to reduce the list to keys which match
the string; the string may contain wildcards. The response will be one or more
RPL_KEYVALUE events and a closing RPL_ENDOFLIST event. The format of METADATA
LIST-SET shall be as follows:

`METADATA [channel] LIST-SET [:string]`

Note that this command may be rate-limited.

*Errors*: ERR_NOMATCHINGKEYS

### METADATA LIST-FORMAT

This subcommand shall list all metadata keys along with their defined formats.
The response will be one or more RPL_KEYVALUE events and a closing
RPL_ENDOFLIST event; the values listed will be format strings or '*', where '*'
indicates that a key accepts any legal input. An optional string may be given,
which shall reduce the list to matching keys; the string may contain wildcards.
The format of METADATA LIST-FORMAT shall be as follows:

`METADATA [channel] LIST-FORMAT [:string]`

Note that this command SHOULD be rate-limited.

*Errors*: ERR_NOMATCHINGKEYS

### METADATA SET

This subcommand shall set a required key to an optional value. If no value is
given, the key is removed; otherwise, the value is assigned to the key. The
response shall be one RPL_KEYVALUE event and one RPL_ENDOFLIST event. The
format of METADATA SET shall be as follows:

`METADATA [channel] SET key [:value]`

*Errors*: ERR_KEYINVALID, ERR_KEYNOTSET

### METADATA CLEAR

This subcommand shall remove all metadata, equivalently to using METADATA SET
on all keys with an empty value. The format of METADATA CLEAR shall be as
follows:

`METADATA [channel] CLEAR`

### METADATA SUBSCRIBE

This subcommand shall notify the user when the target issues a modification to
a given key. The response shall be a RPL_SUBSCRIPTION event listing all
subscribed keys. The format of METADATA SUBSCRIBE is as follows:

`METADATA SUBSCRIBE <Target> :<Key1>[,<Key2>[...]]`

Channels cannot be subscribed to metadata changes. Notifications will employ
the NOTIFY event, documented later in this section. Note that users will always
receive notifications for changes to their own keys. Note, also, that up to 64
subscriptions may exist at any given time.

*Errors*: ERR_CANTSUBSCRIBE, ERR_KEYINVALID, ERR_TOOMANYSUBS

### METADATA UNSUBSCRIBE

This subcommand shall undo the effects of METADATA SUBSCRIBE for the specified
target/key(s). The response shall be a RPL_SUBSCRIPTION event listing any
remaining keys for the target, or no keys if there are no subscriptions left
for the target. Failing to specify any keys instead removes all subscriptions
from the target. The format for METADATA UNSUBSCRIBE is as follows:

`METADATA UNSUBSCRIBE <Target> [:<Key1>[,<Key2>[...]]`

Channels cannot be subscribed to metadata changes, therefore this subcommand is
also invalid for channels.

*Errors*: ERR_CANTUNSUBSCRIBE, ERR_KEYINVALID

## NOTIFY

Notifications, e.g. from metadata subscriptions, shall be passed to the client
using the NOTIFY event, the format of which is as follows:

`NOTIFY <Type> <Key> :<Value>`

where `<Type>`, for this specification, shall be 'metadata'. Future specifications
may expand upon and extend this event for other uses, e.g. for use by IRC
proxies and similar software.

## Metadata Restrictions

Keys shall be restricted to the ranges A–Z, a–z, and 0–9, and are
case-insensitive; they shall, moreover, be namespaced using the period (.) as a
separator. Values are unrestricted, except that they shall be UTF-8; binary
data shall be prefixed with the 'data:' URI, followed by an encoding identifier
(e.g. 'base64'), followed by a colon (:). The use of binary data in values
shall be discouraged.

### Key Registry

There shall be a key registry, with the intention of standardizing keys for
ease of use among server and client authors. It shall be maintained by the
IRCv3 working group or a suitably-delegated authority. Several namespaces
will be defined initially, as follows:

* The 'server' namespace is intended for keys which the user cannot set, such
  as SSL certificate fingerprints.
* The 'user' namespace is intended for keys which the user can set and which
  carry meaning relevant only, or mostly, to users.
* The 'client' namespace is intended for keys which the user can set and which
  describe the user's client.
* The 'ext' namespace is intended for keys which have not been formally
  registered. Server and client authors are advised that they cannot rely on
  this namespace to carry any standardized meaning. The main namespaces may be
  replicated under this namespace, except for 'private'.
* The 'private' namespace is intended for server-internal keys and may only be
  seen with the appropriate server operator permissions. Keys in this
  namespace are not required to be registered.

### Predefined Keys

The following keys are predefined for the purposes of the key registry outlined
above:

| Key            | Meaning                                                      |
| server.certfp  | SSL certificate fingerprint                                  |
| user.email     | User's email address                                         |
| user.phone     | User's phone number                                          |
| user.website   | User's website                                               |
| user.im.*      | IM handles; the * is replaced with the relevant service name |
| user.playing   | Music the user is currently listening to                     |
| user.status    | The user's current status                                    |
| client.name    | Client's name                                                |
| client.version | Client version                                               |

Note that while all of these keys shall carry the '*' format, future keys may
have other formats defined for their values. The precise format of such formats
shall be defined by the IRCv3 working group or suitably-delegated authority.

The server.certfp key, however, must be binary, with either hex or base64
encoding. In lieu of a better format, this may be presented as
`data:{hex,base64}:*`.

## WHOIS

Metadata shall appear in WHOIS output using RPL_WHOISKEYVALUE if any is defined
for the user.

## Services

Metadata should be presentable via NickServ or similar service in order to
allow for persistent metadata; the format for encapsulating METADATA events for
persistance is as follows:

`PRIVMSG <Service> :<Metadata command>`

where `<Service>` is the relevant service and `<Metadata command>` is any METADATA
subcommand as outlined previously. Responses shall be presented appropriately
to the service rather than through RPL_* or ERR_* events.

In addition, services may display metadata by using the INFO command with the
relevant service and account name.

## IRC Daemons

IRCds shall have a blacklist or whitelist and may have an option to enforce
keys against either or neither of them. Implementations may block keys which
might result in impersonation. It is an error for metadata to have any effect
on server operations.

In addition, IRCds SHOULD provide a mechanism for ensuring that the latest
release of the key registry is available.

## Numerics

The format for the numerics provided shall be as follows:

`RPL_KEYVALUE -> <Key> [:<Value>]`

`RPL_SUBSCRIPTION -> <Type> <Target> [:<Key>]`

(`<Type>` for this spec is 'metadata')

`RPL_ENDOFLIST -> <List type> :end of list`

(for this spec, the `<List type>` would be 'metadata')

`RPL_WHOISKEYVALUE -> <Key> :<Value>`

The actual numerics associated with the definitions shall be defined by the
IRCv3 working group.
